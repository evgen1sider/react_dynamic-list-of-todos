{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","value","filterBy","onClear","setState","handleChange","event","currentTarget","handleSelect","filterTodos","todo","showTodo","title","includes","console","log","completed","this","props","todos","onUserSelection","viewTodos","filter","className","type","placeholder","onChange","onClick","name","id","map","classNames","checked","readOnly","userId","React","Component","BASE_URL","loadTodos","a","limit","fetch","response","json","loadUser","CurrentUser","onUserClear","useState","user","setUser","reloadUser","loadingUser","useEffect","email","phone","App","selectedUserId","setSelectedUserId","setTodos","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ade814a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  onUserSelection: (userId: number) => void;\n  todos: Todo[];\n};\n\ntype State = {\n  value: string;\n  filterBy: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    value: '',\n    filterBy: 'all',\n  };\n\n  onClear = () => {\n    this.setState({ value: '' });\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    this.setState(() => ({\n      value,\n    }));\n  };\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.currentTarget;\n\n    if (value === this.state.filterBy) {\n      return;\n    }\n\n    this.setState({ filterBy: value });\n  };\n\n  filterTodos = (todo: Todo) => {\n    const { filterBy, value } = this.state;\n    const showTodo = todo.title.includes(value);\n\n    // eslint-disable-next-line no-console\n    console.log(value);\n\n    switch (filterBy) {\n      case 'all':\n        return showTodo;\n      case 'active':\n        return showTodo && todo.completed === false;\n      case 'completed':\n        return showTodo && todo.completed === true;\n      default:\n        return true;\n    }\n  };\n\n  render() {\n    const { value } = this.state;\n    const { todos, onUserSelection } = this.props;\n\n    const viewTodos = todos.filter(this.filterTodos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__buttons\">\n          <label>\n            <input\n              type=\"text\"\n              placeholder=\"filter by: \"\n              value={value}\n              onChange={this.handleChange}\n              className=\"TodoList__input\"\n            />\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.onClear}\n            >\n              X\n            </button>\n          </label>\n\n          <label>\n            <select\n              name=\"showGoods\"\n              id=\"showGoods\"\n              onChange={this.handleSelect}\n              className=\"TodoList__input\"\n            >\n              <option value=\"all\">show all</option>\n              <option value=\"active\">show all active</option>\n              <option value=\"completed\">show all completed</option>\n            </select>\n          </label>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {viewTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelection(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async (limit = 20) => {\n  const response = await fetch(`${BASE_URL}/todos?limit=${limit}`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { loadUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  onUserClear: () => void;\n}\n\nexport const CurrentUser: React.FC<Props> = (props) => {\n  const { userId, onUserClear } = props;\n  const [user, setUser] = useState<User | null>(null);\n\n  const reloadUser = async () => {\n    const loadingUser: User | null = await loadUser(userId);\n\n    setUser(loadingUser);\n  };\n\n  useEffect(() => {\n    reloadUser();\n  }, []);\n\n  useEffect(() => {\n    reloadUser();\n  }, [userId]);\n\n  if (!user) {\n    return (\n      <p>User not found</p>\n    );\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {` ${user.name}`}\n        </span>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={onUserClear}\n        >\n          Clear\n        </button>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api/api';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    (\n      async () => {\n        const data = await loadTodos(20);\n\n        return setTodos(data);\n      }\n    )();\n  }, []);\n\n  const handleUserClear = () => {\n    setSelectedUserId(0);\n  };\n\n  const handleUserSelected = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onUserSelection={handleUserSelected}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onUserClear={handleUserClear}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}